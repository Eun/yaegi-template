// Code generated by 'goexports math'. DO NOT EDIT.

// +build go1.14,!go1.15

package stdlib

import (
	"math"
	"reflect"
)

func init() {
	Symbols["math"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Abs":                    reflect.ValueOf(math.Abs),
		"Acos":                   reflect.ValueOf(math.Acos),
		"Acosh":                  reflect.ValueOf(math.Acosh),
		"Asin":                   reflect.ValueOf(math.Asin),
		"Asinh":                  reflect.ValueOf(math.Asinh),
		"Atan":                   reflect.ValueOf(math.Atan),
		"Atan2":                  reflect.ValueOf(math.Atan2),
		"Atanh":                  reflect.ValueOf(math.Atanh),
		"Cbrt":                   reflect.ValueOf(math.Cbrt),
		"Ceil":                   reflect.ValueOf(math.Ceil),
		"Copysign":               reflect.ValueOf(math.Copysign),
		"Cos":                    reflect.ValueOf(math.Cos),
		"Cosh":                   reflect.ValueOf(math.Cosh),
		"Dim":                    reflect.ValueOf(math.Dim),
		"E":                      reflect.ValueOf(math.E),
		"Erf":                    reflect.ValueOf(math.Erf),
		"Erfc":                   reflect.ValueOf(math.Erfc),
		"Erfcinv":                reflect.ValueOf(math.Erfcinv),
		"Erfinv":                 reflect.ValueOf(math.Erfinv),
		"Exp":                    reflect.ValueOf(math.Exp),
		"Exp2":                   reflect.ValueOf(math.Exp2),
		"Expm1":                  reflect.ValueOf(math.Expm1),
		"FMA":                    reflect.ValueOf(math.FMA),
		"Float32bits":            reflect.ValueOf(math.Float32bits),
		"Float32frombits":        reflect.ValueOf(math.Float32frombits),
		"Float64bits":            reflect.ValueOf(math.Float64bits),
		"Float64frombits":        reflect.ValueOf(math.Float64frombits),
		"Floor":                  reflect.ValueOf(math.Floor),
		"Frexp":                  reflect.ValueOf(math.Frexp),
		"Gamma":                  reflect.ValueOf(math.Gamma),
		"Hypot":                  reflect.ValueOf(math.Hypot),
		"Ilogb":                  reflect.ValueOf(math.Ilogb),
		"Inf":                    reflect.ValueOf(math.Inf),
		"IsInf":                  reflect.ValueOf(math.IsInf),
		"IsNaN":                  reflect.ValueOf(math.IsNaN),
		"J0":                     reflect.ValueOf(math.J0),
		"J1":                     reflect.ValueOf(math.J1),
		"Jn":                     reflect.ValueOf(math.Jn),
		"Ldexp":                  reflect.ValueOf(math.Ldexp),
		"Lgamma":                 reflect.ValueOf(math.Lgamma),
		"Ln10":                   reflect.ValueOf(math.Ln10),
		"Ln2":                    reflect.ValueOf(math.Ln2),
		"Log":                    reflect.ValueOf(math.Log),
		"Log10":                  reflect.ValueOf(math.Log10),
		"Log10E":                 reflect.ValueOf(math.Log10E),
		"Log1p":                  reflect.ValueOf(math.Log1p),
		"Log2":                   reflect.ValueOf(math.Log2),
		"Log2E":                  reflect.ValueOf(math.Log2E),
		"Logb":                   reflect.ValueOf(math.Logb),
		"Max":                    reflect.ValueOf(math.Max),
		"MaxFloat32":             reflect.ValueOf(float32(math.MaxFloat32)),
		"MaxFloat64":             reflect.ValueOf(math.MaxFloat64),
		"MaxInt16":               reflect.ValueOf(math.MaxInt16),
		"MaxInt32":               reflect.ValueOf(math.MaxInt32),
		"MaxInt64":               reflect.ValueOf(int64(math.MaxInt64)),
		"MaxInt8":                reflect.ValueOf(math.MaxInt8),
		"MaxUint16":              reflect.ValueOf(math.MaxUint16),
		"MaxUint32":              reflect.ValueOf(uint32(math.MaxUint32)),
		"MaxUint64":              reflect.ValueOf(uint64(math.MaxUint64)),
		"MaxUint8":               reflect.ValueOf(math.MaxUint8),
		"Min":                    reflect.ValueOf(math.Min),
		"MinInt16":               reflect.ValueOf(math.MinInt16),
		"MinInt32":               reflect.ValueOf(math.MinInt32),
		"MinInt64":               reflect.ValueOf(int64(math.MinInt64)),
		"MinInt8":                reflect.ValueOf(math.MinInt8),
		"Mod":                    reflect.ValueOf(math.Mod),
		"Modf":                   reflect.ValueOf(math.Modf),
		"NaN":                    reflect.ValueOf(math.NaN),
		"Nextafter":              reflect.ValueOf(math.Nextafter),
		"Nextafter32":            reflect.ValueOf(math.Nextafter32),
		"Phi":                    reflect.ValueOf(math.Phi),
		"Pi":                     reflect.ValueOf(math.Pi),
		"Pow":                    reflect.ValueOf(math.Pow),
		"Pow10":                  reflect.ValueOf(math.Pow10),
		"Remainder":              reflect.ValueOf(math.Remainder),
		"Round":                  reflect.ValueOf(math.Round),
		"RoundToEven":            reflect.ValueOf(math.RoundToEven),
		"Signbit":                reflect.ValueOf(math.Signbit),
		"Sin":                    reflect.ValueOf(math.Sin),
		"Sincos":                 reflect.ValueOf(math.Sincos),
		"Sinh":                   reflect.ValueOf(math.Sinh),
		"SmallestNonzeroFloat32": reflect.ValueOf(math.SmallestNonzeroFloat32),
		"SmallestNonzeroFloat64": reflect.ValueOf(math.SmallestNonzeroFloat64),
		"Sqrt":                   reflect.ValueOf(math.Sqrt),
		"Sqrt2":                  reflect.ValueOf(math.Sqrt2),
		"SqrtE":                  reflect.ValueOf(math.SqrtE),
		"SqrtPhi":                reflect.ValueOf(math.SqrtPhi),
		"SqrtPi":                 reflect.ValueOf(math.SqrtPi),
		"Tan":                    reflect.ValueOf(math.Tan),
		"Tanh":                   reflect.ValueOf(math.Tanh),
		"Trunc":                  reflect.ValueOf(math.Trunc),
		"Y0":                     reflect.ValueOf(math.Y0),
		"Y1":                     reflect.ValueOf(math.Y1),
		"Yn":                     reflect.ValueOf(math.Yn),
	}
}
